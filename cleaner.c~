//This method will let the kernel deallocate all the memory that it acquired in
//  kernel_setup and also lets the kernel write to its output file.
void kernel_finish(int kernel, cudaStream_t stream, char * filename, void *setupResult )
{
    if(kernel==1) sleep_finish(filename, setupResult);

    if(kernel==2) matMul_finish(filename, setupResult);
}


struct CleanerRecord
{
    int BatchSize;
    cudaStreams *Streams;
    char **InputFiles;
    char **OutputFiles;
    int *Kernels;
};

CleanerRecord *makeCleanerRecord(int batchSize, cudaStreams *streams, 
                                    char **inputFiles, char **outputFiles, int *kernels)
{
    CleanerRecord *r = (CleanerRecord *) malloc (sizeof(struct CleanerRecord));
    r->BatchSize = batchSize;
    r->Streams = streams;
    r->InputFiles = inputFiles;
    r->OutputFiles = outputFiles;
    r->Kernels = kernels;
    return r;
}



///////////////////////////////////////////////////////////////////////
// Cleaners's main
///////////////////////////////////////////////////////////////////////

void *cleaner_Main(void *params)
{
//   FOR ALL MY COMMENTS q :: 1..batchSize
//open up params (its actually a CleanerRecord *)
    CleanerRecord *r = (CleanerRecord *) params;

    int batchSize = r->BatchSize;
    cudaStreams *streams = r->Streams;
    char **inputFiles = r->InputFiles;
    char **outputFiles = r->OutputFiles;
    int *kernels = r->Kernels;

//call kernel_finish for each kernel
    for(int q=0; q<batchSize; q++){
        kernel_finish(kernels[q], streams[q], outputFiles[q], setupResults[q]);
    }

//Synchronize with each streams[q]
    for(int q=0; q<batchSize; q++) cudaStreamSynchronize(streams[q]);

//deallocate: inputFiles[q] outputFiles[q]
//            inputFiles    outputFiles
//            kernels
//            streams[q]    streams


    for(int q=0;q<batchSize;q++){
        free(inputFiles[q]);
        free(outputFiles[q]);
        cudaStreamDestroy(streams[q]);
    }
	//free the arrays that we used;
    free(streams);
    free(kernels);
    free(inputFiles);
    free(outputFiles);

    printf("cleaner finished a batch of kernels\n");
    return 0;
}






